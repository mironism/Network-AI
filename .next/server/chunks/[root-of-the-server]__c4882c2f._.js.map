{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file:///Users/sebastianbugal/Documents/Network-AI/src/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n}"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,IAAA,4IAAO;IAEjC,OAAO,IAAA,iMAAkB,sUAGvB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///Users/sebastianbugal/Documents/Network-AI/src/app/auth/callback/route.ts"],"sourcesContent":["import { createClient } from '@/lib/supabase/server'\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  const { searchParams, origin } = new URL(request.url)\n  const code = searchParams.get('code')\n  // if \"next\" is in param, use it as the redirect URL\n  const next = searchParams.get('next') ?? '/'\n\n  if (code) {\n    const supabase = await createClient()\n    const { error } = await supabase.auth.exchangeCodeForSession(code)\n    if (!error) {\n      const forwardedHost = request.headers.get('x-forwarded-host') // original origin before load balancer\n      const isLocalEnv = process.env.NODE_ENV === 'development'\n      if (isLocalEnv) {\n        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host\n        return NextResponse.redirect(`${origin}${next}`)\n      } else if (forwardedHost) {\n        return NextResponse.redirect(`https://${forwardedHost}${next}`)\n      } else {\n        return NextResponse.redirect(`${origin}${next}`)\n      }\n    }\n  }\n\n  // return the user to an error page with instructions\n  return NextResponse.redirect(`${origin}/auth/auth-code-error`)\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IACpD,MAAM,OAAO,aAAa,GAAG,CAAC;IAC9B,oDAAoD;IACpD,MAAM,OAAO,aAAa,GAAG,CAAC,WAAW;IAEzC,IAAI,MAAM;QACR,MAAM,WAAW,MAAM,IAAA,kJAAY;QACnC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,sBAAsB,CAAC;QAC7D,IAAI,CAAC,OAAO;YACV,MAAM,gBAAgB,QAAQ,OAAO,CAAC,GAAG,CAAC,oBAAoB,uCAAuC;;YACrG,MAAM,aAAa,oDAAyB;YAC5C,wCAAgB;gBACd,qGAAqG;gBACrG,OAAO,gJAAY,CAAC,QAAQ,CAAC,GAAG,SAAS,MAAM;YACjD;;QAKF;IACF;IAEA,qDAAqD;IACrD,OAAO,gJAAY,CAAC,QAAQ,CAAC,GAAG,OAAO,qBAAqB,CAAC;AAC/D","debugId":null}}]
}